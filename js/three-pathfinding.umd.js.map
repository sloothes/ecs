{"version":3,"file":"three-pathfinding.umd.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/Pathfinding.js","../src/PathfindingHelper.js"],"sourcesContent":["class Utils {\n\n  static roundNumber (value, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import { Utils } from './Utils';\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {THREE.Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygon = new Map(); // { polygon: index in group }\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        const centroid = new THREE.Vector3( 0, 0, 0 );\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\n        centroid.divideScalar( 3 );\n        centroid.x = Utils.roundNumber(centroid.x, 2);\n        centroid.y = Utils.roundNumber(centroid.y, 2);\n        centroid.z = Utils.roundNumber(centroid.z, 2);\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {THREE.Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Array(vertices.length); // array of polygon objects by vertex index\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      const poly = { vertexIds: [face.a, face.b, face.c], neighbours: null };\n      polygons.push(poly);\n      vertexPolygonMap[face.a].push(poly);\n      vertexPolygonMap[face.b].push(poly);\n      vertexPolygonMap[face.c].push(poly);\n    });\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\n\n    const bList = b.vertexIds;\n    const shared0 = bList.includes(a0);\n    const shared1 = bList.includes(a1);\n    const shared2 = bList.includes(a2);\n\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\n    // is a kind of embarrassing but possible geometry we should handle\n    if (shared0 && shared1 && shared2) {\n      return Array.from(aList);\n    } else if (shared0 && shared1) {\n      return [a0, a1];\n    } else if (shared1 && shared2) {\n      return [a1, a2];\n    } else if (shared0 && shared2) {\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\n    } else {\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\n      return [];\n    }\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","/* global THREE */\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {THREE.BufferGeometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\tif ( geometry.isGeometry ) {\n\t\t\t// Haven't actually implemented support for BufferGeometry yet, but Geometry is somewhat\n\t\t\t// not-recommended these days, so go ahead and start warning.\n\t\t\tconsole.warn('[three-pathfinding]: Use THREE.BufferGeometry, not THREE.Geometry, to create zone.');\n\t\t} else {\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry(geometry);\n\t\t}\n\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {THREE.Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new THREE.Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new THREE.Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {THREE.Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {THREE.Vector3} startPosition Start position.\n\t * @param  {THREE.Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<THREE.Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new THREE.Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {THREE.Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new THREE.Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {THREE.Vector3} start\n * @param  {THREE.Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {THREE.Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new THREE.Vector3();\n\tconst plane = new THREE.Plane();\n\tconst triangle = new THREE.Triangle();\n\n\tconst endPoint = new THREE.Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new THREE.Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode.id];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<THREE.Vector3} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number} vertexIds\n * @property {THREE.Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","/* global THREE */\n\nconst Color = {\n  PLAYER: new THREE.Color( 0xEE836F ).convertGammaToLinear( 2.2 ).getHex(),\n  TARGET: new THREE.Color( 0xDCCB18 ).convertGammaToLinear( 2.2 ).getHex(),\n  PATH: new THREE.Color( 0x00A3AF ).convertGammaToLinear( 2.2 ).getHex(),\n  WAYPOINT: new THREE.Color( 0x00A3AF ).convertGammaToLinear( 2.2 ).getHex(),\n  CLAMPED_STEP: new THREE.Color( 0xDCD3B2 ).convertGammaToLinear( 2.2 ).getHex(),\n  CLOSEST_NODE: new THREE.Color( 0x43676B ).convertGammaToLinear( 2.2 ).getHex(),\n};\n\nconst OFFSET = 0.2;\n\n/**\n * Helper for debugging pathfinding behavior.\n */\nclass PathfindingHelper extends THREE.Object3D {\n  constructor () {\n    super();\n\n    this._playerMarker = new THREE.Mesh(\n      new THREE.SphereGeometry( 0.25, 32, 32 ),\n      new THREE.MeshBasicMaterial( {color: Color.PLAYER} )\n    );\n\n    this._targetMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.3, 0.3, 0.3 ),\n      new THREE.MeshBasicMaterial( {color: Color.TARGET} )\n    );\n    \n\n    this._nodeMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.1, 0.8, 0.1 ),\n      new THREE.MeshBasicMaterial( { color: Color.CLOSEST_NODE } )\n    );\n    \n\n    this._stepMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.1, 1, 0.1 ),\n      new THREE.MeshBasicMaterial( { color: Color.CLAMPED_STEP } )\n    );\n\n    this._pathMarker = new THREE.Object3D();\n\n    this._pathLineMaterial = new THREE.LineBasicMaterial( { color: Color.PATH, linewidth: 2 } ) ;\n    this._pathPointMaterial = new THREE.MeshBasicMaterial( { color: Color.WAYPOINT } );\n    this._pathPointGeometry = new THREE.SphereBufferGeometry( 0.08 );\n\n    this._markers = [\n      this._playerMarker,\n      this._targetMarker,\n      this._nodeMarker,\n      this._stepMarker,\n      this._pathMarker,\n    ];\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n      this.add( marker );\n\n    } );\n\n  }\n\n  /**\n   * @param {Array<THREE.Vector3} path\n   * @return {this}\n   */\n  setPath ( path ) {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    path = [ this._playerMarker.position ].concat( path );\n\n    // Draw debug lines\n    const geometry = new THREE.Geometry();\n    for (let i = 0; i < path.length; i++) {\n      geometry.vertices.push( path[ i ].clone().add( new THREE.Vector3( 0, OFFSET, 0 ) ) );\n    }\n    this._pathMarker.add( new THREE.Line( geometry, this._pathLineMaterial ) );\n\n    for ( let i = 0; i < path.length - 1; i++ ) {\n\n      const node = new THREE.Mesh( this._pathPointGeometry, this._pathPointMaterial );\n      node.position.copy( path[ i ] );\n      node.position.y += OFFSET;\n      this._pathMarker.add( node );\n\n    }\n\n    this._pathMarker.visible = true;\n\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setPlayerPosition( position ) {\n\n    this._playerMarker.position.copy( position );\n    this._playerMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setTargetPosition( position ) {\n\n    this._targetMarker.position.copy( position );\n    this._targetMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setNodePosition( position ) {\n\n    this._nodeMarker.position.copy( position );\n    this._nodeMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setStepPosition( position ) {\n\n    this._stepMarker.position.copy( position );\n    this._stepMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * Hides all markers.\n   * @return {this}\n   */\n  reset () {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n    } );\n\n    return this;\n\n  }\n\n}\n\nexport { PathfindingHelper };\n"],"names":["Utils","roundNumber","value","decimals","const","factor","Math","pow","round","sample","list","floor","random","length","distanceToSquared","a","b","dx","x","dy","y","dz","z","isPointInPoly","poly","pt","c","i","l","j","isVectorInPolygon","vector","polygon","vertices","lowestPoint","highestPoint","polygonVertices","vertexIds","forEach","vId","min","max","push","this","triarea2","vequal","BinaryHeap","scoreFunction","content","element","sinkDown","pop","result","end","bubbleUp","remove","node","indexOf","size","rescoreElement","n","parentN","parent","elemScore","child2N","child1N","swap","child1Score","AStar","init","graph","let","f","g","h","cost","visited","closed","cleanUp","heap","search","start","openHeap","currentNode","curr","ret","reverse","neighbours","il","neighbour","gScore","beenVisited","centroid","Error","heuristic","pos1","pos2","e","Builder","buildZone","geometry","navMesh","_buildNavigationMesh","zone","v","groups","_buildPolygonGroups","Array","group","groupIndex","indexByPolygon","Map","polyIndex","set","newGroup","neighbourIndices","get","portals","_getSharedVerticesInOrder","THREE","Vector3","add","divideScalar","mergeVertices","_buildPolygonsFromGeometry","navigationMesh","polygonGroups","spreadGroupId","undefined","polygons","_buildPolygonNeighbours","vertexPolygonMap","Set","groupB","groupC","candidate","includes","faces","face","aList","a0","a1","a2","bList","shared0","shared1","shared2","from","console","warn","Channel","p1","p2","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","left","right","path","plane","Pathfinding","zones","createZone","isGeometry","Geometry","fromBufferGeometry","setZoneData","zoneID","getRandomNode","groupID","nearPosition","nearRange","candidates","p","getClosestNode","position","checkPolygon","closestNode","closestDistance","Infinity","distance","findPath","startPosition","targetPosition","nodes","farthestNode","paths","getPortalFromTo","id","channel","nextPolygon","map","shift","prototype","getGroup","Plane","closestNodeGroup","setFromCoplanarPoints","abs","distanceToPoint","measuredDistance","clampStep","point","triangle","Triangle","endPoint","closestPoint","startRef","endRef","endTarget","nodeQueue","nodeDepth","projectPoint","copy","closestPointToPoint","depth","Color","PLAYER","convertGammaToLinear","getHex","TARGET","PATH","WAYPOINT","CLAMPED_STEP","CLOSEST_NODE","PathfindingHelper","super","_playerMarker","Mesh","SphereGeometry","MeshBasicMaterial","color","_targetMarker","BoxGeometry","_nodeMarker","_stepMarker","_pathMarker","Object3D","_pathLineMaterial","LineBasicMaterial","linewidth","_pathPointMaterial","_pathPointGeometry","SphereBufferGeometry","_markers","marker","visible","setPath","children","concat","clone","Line","setPlayerPosition","setTargetPosition","setNodePosition","setStepPosition","reset"],"mappings":"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"}